Samples <- matrix(sample(vector,B*n,replace = T), nrow = B, ncol = n)
bootTheta <- apply(Samples,1,FUN)
BiasB <- mean(bootTheta-theta)
VarB <- mean(bootTheta^2)-(mean(bootTheta))^2
return(list(bias = BiasB, variance = VarB))
}
Bootstrap(len,kurtosis,2000)
Bootstrap <- function(vector, FUN, B) {
set.seed(1)
n <- length(vector)
theta <- FUN(vector)
Samples <- matrix(sample(vector,B*n,replace = T), nrow = B, ncol = n)
bootTheta <- apply(Samples,1,FUN)
BiasB <- mean(bootTheta-theta)
VarB <- mean(bootTheta^2)-(mean(bootTheta))^2
return(list(bias = BiasB, variance = VarB))
}
Bootstrap(len,kurtosis,2000)
((n-1)^2/n)*var(x)
((5-1)^2/5)*var(x)
1.84/2.3
Bootstrap(len,kurtosis,1000)
Bootstrap(len,kurtosis,1000)
Bootstrap(len,median,1000)
Bootstrap(len,IQR,1000)
len.VC <- as.vector(ToothGrowth %>% filter(supp=="VC") %>% select(len))
View(len.VC)
len.OJ <- ToothGrowth$len[which(ToothGrowth$supp=="OJ")]
len.VC <- ToothGrowth$len[which(ToothGrowth$supp=="VC")]
len.OJ <- ToothGrowth$len[which(ToothGrowth$supp=="OJ")]
data(CommuteAtlanta)
my.mean = function(x, indices) {
return( mean( x[indices] ) )
}
time.boot = boot(CommuteAtlanta$Time, my.mean, 10000)
data(CommuteAtlanta)
library(Lock5Data)
install.packages("Lock5Data")
library(Lock5Data)
data(CommuteAtlanta)
my.mean = function(x, indices) {
return( mean( x[indices] ) )
}
time.boot = boot(CommuteAtlanta$Time, my.mean, 10000)
time.boot
my.kurtosis <- function(x,indices) {
return(kurtosis(x[indices]))
}
boot(ToothGrowth$len,my.kurtosis,R=1000)
boot(ToothGrowth$len,my.kurtosis,R=1000)
boot(ToothGrowth$len,my.kurtosis,R=1000)
diffIQRBoot <- function(vec1, vec2, B) {
n1 <- length(vec1)
n2 <- length(vec2)
sample.1 <- matrix(sample(vec1,n1*B,replace = T),nrow = B, ncol=n1)
sample.2 <- matrix(sample(vec2,n2*B,replace = T),nrow = B, ncol=n2)
IQR.1 <- apply(sample.1, 1, IQR)
IQR.2 <- apply(sample.2, 1, IQR)
diff <- IQR.1-IQR.2
return(quantile(diff,c(0.05,0.95)))
}
diffIQRBoot(len.VC,len.OJ,1000)
library(ggplot2)
library(gridExtra)
library(e1071)
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth,5)
p1 <- ggplot(ToothGrowth, aes(x=supp, y=len)) + geom_boxplot(color="red") +
theme_bw() + labs(title="length by supplements")
p2 <- ggplot(ToothGrowth, aes(x = len)) +
geom_histogram(binwidth=0.5,color="skyblue",fill="white") + facet_wrap(~supp) +
theme_bw() + labs(title="length distribution")
grid.arrange(p1,p2,nrow=2)
ggplot(ToothGrowth, aes(x=interaction(supp, dose), y=len)) + geom_boxplot() + theme_bw()
cat("The sample kurtosis of len is ",kurtosis(ToothGrowth$len),
"\nThe sample median of len is ", median(ToothGrowth$len),
"\nThe sample IQR of len is ", IQR(ToothGrowth$len))
len <- as.vector(ToothGrowth$len)
JackKnife <- function(vector, FUN) {
n <- length(vector)
if (n <=1) stop("insufficient length of vector")
theta <- FUN(vector)
leaveOneTheta <- c()
for (i in 1:n){
leaveOneTheta <- c(leaveOneTheta, FUN(vector[-i]))
}
BiasJ <- (mean(leaveOneTheta)-theta)*(n-1)
VarJ <- ((n-1)^2/n)*var(leaveOneTheta)
return(list(bias=BiasJ,variance=VarJ))
}
JackKnife(len,kurtosis)
JackKnife(len,median)
JackKnife(len,IQR)
Bootstrap <- function(vector, FUN, B) {
set.seed(1)
n <- length(vector)
theta <- FUN(vector)
Samples <- matrix(sample(vector,B*n,replace = T), nrow = B, ncol = n)
bootTheta <- apply(Samples,1,FUN)
BiasB <- mean(bootTheta-theta)
VarB <- mean(bootTheta^2)-(mean(bootTheta))^2
return(list(bias = BiasB, variance = VarB))
}
Bootstrap(len,kurtosis,1000)
Bootstrap(len,median,1000)
Bootstrap(len,IQR,1000)
len.VC <- ToothGrowth$len[which(ToothGrowth$supp=="VC")]
len.OJ <- ToothGrowth$len[which(ToothGrowth$supp=="OJ")]
diffBootCI <- function(vec1, vec2, B, FUN, q=0.95) {
n1 <- length(vec1)
n2 <- length(vec2)
sample.1 <- matrix(sample(vec1,n1*B,replace = T),nrow = B, ncol=n1)
sample.2 <- matrix(sample(vec2,n2*B,replace = T),nrow = B, ncol=n2)
stat.1 <- apply(sample.1, 1, FUN)
stat.2 <- apply(sample.2, 1, FUN)
diff <- stat.1-stat.2
return(quantile(diff,c(1-q,q)))
}
diffBootCI(len.VC,len.OJ,1000,IQR)
help(lapply)
library(ggplot2)
library(gridExtra)
library(e1071)
library(ggplot2)
library(gridExtra)
library(e1071)
data(ToothGrowth)
str(ToothGrowth)
p1 <- ggplot(ToothGrowth, aes(x=supp, y=len)) + geom_boxplot(color="red") +
theme_bw() + labs(title="length by supplements")
p2 <- ggplot(ToothGrowth, aes(x = len)) +
geom_histogram(binwidth=0.5,color="skyblue",fill="white") + facet_wrap(~supp) +
theme_bw() + labs(title="length distribution")
grid.arrange(p1,p2,nrow=2)
len.VC <- ToothGrowth$len[which(ToothGrowth$supp=="VC")]
len.OJ <- ToothGrowth$len[which(ToothGrowth$supp=="OJ")]
length <- list(VC=len.VC, OJ=len.OJ)
lapply(length,kurtosis)
sapply(length,kurtosis)
list(kurtosis = sapply(length,kurtosis),
median = sapply(length,median),
IQR = sapply(length,IQR))
list(kurtosis = sapply(length,JackKnife,FUN = kurtosis),
median = sapply(length,JackKnife,FUN = median),
IQR = sapply(length,JackKnife,FUN = IQR))
JackKnife <- function(vector, FUN) {
n <- length(vector)
if (n <=1) stop("insufficient length of vector")
theta <- FUN(vector)
leaveOneTheta <- c()
for (i in 1:n){
leaveOneTheta <- c(leaveOneTheta, FUN(vector[-i]))
}
BiasJ <- (mean(leaveOneTheta)-theta)*(n-1)
VarJ <- ((n-1)^2/n)*var(leaveOneTheta)
return(list(bias=BiasJ,variance=VarJ))
}
list(kurtosis = sapply(length,JackKnife,FUN = kurtosis),
median = sapply(length,JackKnife,FUN = median),
IQR = sapply(length,JackKnife,FUN = IQR))
sapply(length,JackKnife,FUN = kurtosis)
vapply(length,JackKnife,kurtosis)
JackKnife <- function(vector, f) {
n <- length(vector)
if (n <=1) stop("insufficient length of vector")
theta <- FUN(vector)
leaveOneTheta <- c()
for (i in 1:n){
leaveOneTheta <- c(leaveOneTheta, FUN(vector[-i]))
}
BiasJ <- (mean(leaveOneTheta)-theta)*(n-1)
VarJ <- ((n-1)^2/n)*var(leaveOneTheta)
return(list(bias=BiasJ,variance=VarJ))
}
vapply(length,JackKnife,f=kurtosis)
sapply(length,JackKnife,f=kurtosis)
sapply(length,FUN=JackKnife,f=kurtosis)
JackKnife <- function(vector, f) {
n <- length(vector)
if (n <=1) stop("insufficient length of vector")
theta <- f(vector)
leaveOneTheta <- c()
for (i in 1:n){
leaveOneTheta <- c(leaveOneTheta, f(vector[-i]))
}
BiasJ <- (mean(leaveOneTheta)-theta)*(n-1)
VarJ <- ((n-1)^2/n)*var(leaveOneTheta)
return(list(bias=BiasJ,variance=VarJ))
}
sapply(length,FUN=JackKnife,f=kurtosis)
sapply(length,JackKnife,f=kurtosis)
list(kurtosis = sapply(length,JackKnife,f=kurtosis))
list(kurtosis = sapply(length,JackKnife,f=kurtosis),
median = sapply(length,JackKnife,f=median),
IQR = sapply(length,JackKnife,f=IQR))
Bootstrap <- function(vector, f, B) {
set.seed(1)
n <- length(vector)
theta <- f(vector)
samples <- matrix(sample(vector,B*n,replace = T), nrow = B, ncol = n)
bootTheta <- apply(samples,1,f)
BiasB <- mean(bootTheta-theta)
VarB <- mean(bootTheta^2)-(mean(bootTheta))^2
return(list(bias = BiasB, variance = VarB))
}
Bootstrap <- function(vector, f, B=1000) {
set.seed(1)
n <- length(vector)
theta <- f(vector)
samples <- matrix(sample(vector,B*n,replace = T), nrow = B, ncol = n)
bootTheta <- apply(samples,1,f)
BiasB <- mean(bootTheta-theta)
VarB <- mean(bootTheta^2)-(mean(bootTheta))^2
return(list(bias = BiasB, variance = VarB))
}
list(kurtosis = sapply(length,Bootstrap,f=kurtosis),
median = sapply(length,Bootstrap,f=median),
IQR = sapply(length,Bootstrap,f=IQR))
diffBootCI <- function(vec1, vec2, B, FUN, q=0.95) {
n1 <- length(vec1)
n2 <- length(vec2)
sample.1 <- matrix(sample(vec1,n1*B,replace = T),nrow = B, ncol=n1)
sample.2 <- matrix(sample(vec2,n2*B,replace = T),nrow = B, ncol=n2)
theta.1 <- apply(sample.1, 1, FUN)
theta.2 <- apply(sample.2, 1, FUN)
diff <- theta.1-theta.2
return(quantile(diff,c(1-q,q)))
}
diffBootCI(len.VC,len.OJ,1000,IQR)
```{r,message=FALSE,warning=FALSE}
library(ggplot2)
library(gridExtra)
library(e1071)
setwd("~/Documents/GitHub/Fall2018-Proj1-lujiaw/doc")
library(tm)
library(tidyverse)
library(tidytext)
library(DT)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile)
demo_data$age <- as.numeric(demo_data$age) # change age datatype into numeric
hm_data <- hm_data %>%
inner_join(demo_data, by = "wid") %>%
select(id,
wid,
cleaned_hm,
gender,
marital,
parenthood,
reflection_period,
num_sentence,
age,
country,
ground_truth_category,
predicted_category,
text) %>%
mutate(count = sapply(hm_data$text, wordcount)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(age < 120) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(reflection_period = fct_recode(reflection_period,
months_3 = "3m", hours_24 = "24h"))
bag_of_words <-  hm_data %>%
unnest_tokens(word, text)
cat.df <- bag_of_words %>% filter(word %in% c('cat','kitten','kitty')) %>%
distinct(id) %>% left_join(hm_data) %>% mutate(word = NULL)
dog.df <- bag_of_words %>% filter(word %in% c('dog','puppy','doggy')) %>%
distinct(id) %>% left_join(hm_data) %>% mutate(word = NULL)
datatable(cat_df)
datatable(cat.df)
cat_words <- cat.df %>% unnest_tokens(word, text)
dog_words <- dog.df %>% unnest_tokens(word, text)
View(cat_words)
cat_word_count <- cat_words %>% count(word, sort = TRUE) %>% filter(!word %in% c('cat','kitten','kitty'))
dog_word_count <- dog_words %>% count(word, sort = TRUE) %>% filter(!word %in% c('dog','puppy','doggy'))
wordcloud2(cat_word_count, size = 0.5, color = "random-light")
wordcloud2(dog_word_count,size = 0.5, color = "random-light")
ggplot(pet_df, aes(x = age, color = group, group=group)) +
geom_histogram(binwidth = 0.5, position = "dodge", fill = "white") +
theme_bw()
pet_df <- bind_rows("cat" = cat.df, "dog" = dog.df, .id = "group")
ggplot(pet_df, aes(x = age, color = group, group=group)) +
geom_histogram(binwidth = 0.5, position = "dodge", fill = "white") +
theme_bw()
#pet vs total
p1 <- ggplot(data = hm_data, aes(x=age))+
geom_density(aes(color="overall")) +
# Change the fill colour to differentiate it
geom_density(data=pet_df,aes(color="pet")) +
theme_bw()
# age distribution in percentage by gender
p2 <- ggplot(pet_df, aes(x = age, color = group, group=group, fill=group)) +
geom_histogram(aes(y=..density..),binwidth = 0.5, position = "dodge") +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~gender) +
theme_bw()
grid.arrange(p1,p2,nrow=2)
p1 <- ggplot(data = hm_data, aes(x=age))+
geom_density(aes(color="overall"),x=c(0,80)) +
# Change the fill colour to differentiate it
geom_density(data=pet_df,aes(color="pet")) +
theme_bw()
# age distribution in percentage by gender
p2 <- ggplot(pet_df, aes(x = age, color = group, group=group, fill=group)) +
geom_histogram(aes(y=..density..),binwidth = 0.5, position = "dodge") +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~gender) +
theme_bw()
grid.arrange(p1,p2,nrow=2)
#pet vs total
p1 <- ggplot(data = hm_data, aes(x=age))+
geom_density(aes(color="overall"),xlim=c(0,80)) +
# Change the fill colour to differentiate it
geom_density(data=pet_df,aes(color="pet")) +
theme_bw()
# age distribution in percentage by gender
p2 <- ggplot(pet_df, aes(x = age, color = group, group=group, fill=group)) +
geom_histogram(aes(y=..density..),binwidth = 0.5, position = "dodge") +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~gender) +
theme_bw()
grid.arrange(p1,p2,nrow=2)
p1 <- ggplot(data = hm_data, aes(x=age))+
geom_density(aes(color="overall"),xlim=c(0,60)) +
# Change the fill colour to differentiate it
geom_density(data=pet_df,aes(color="pet")) +
theme_bw()
# age distribution in percentage by gender
p2 <- ggplot(pet_df, aes(x = age, color = group, group=group, fill=group)) +
geom_histogram(aes(y=..density..),binwidth = 0.5, position = "dodge",xlim=c(0,60)) +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~gender) +
theme_bw()
grid.arrange(p1,p2,nrow=2)
p1 <- ggplot(data = hm_data, aes(x=age))+
geom_density(aes(color="overall")) +
# Change the fill colour to differentiate it
geom_density(data=pet_df,aes(color="pet")) +
xlim(0,60) +
theme_bw()
# age distribution in percentage by gender
p2 <- ggplot(pet_df, aes(x = age, color = group, group=group, fill=group)) +
geom_histogram(aes(y=..density..),binwidth = 0.5, position = "dodge",xlim=c(0,60)) +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~gender) +
theme_bw()
grid.arrange(p1,p2,nrow=2)
#pet vs total
p1 <- ggplot(data = hm_data, aes(x=age))+
geom_density(aes(color="overall")) +
# Change the fill colour to differentiate it
geom_density(data=pet_df,aes(color="pet")) +
xlim(0,80) +
theme_bw()
# age distribution in percentage by gender
p2 <- ggplot(pet_df, aes(x = age, color = group, group=group, fill=group)) +
geom_histogram(aes(y=..density..),binwidth = 0.5, position = "dodge",xlim=c(0,60)) +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~gender) +
theme_bw()
grid.arrange(p1,p2,nrow=2)
p1 <- ggplot(data = hm_data, aes(x=age))+
geom_density(aes(color="overall")) +
# Change the fill colour to differentiate it
geom_density(data=pet_df,aes(color="pet")) +
xlim(0,80) +
theme_bw()
# age distribution in percentage by gender
p2 <- ggplot(pet_df, aes(x = age, color = group, group=group, fill=group)) +
geom_histogram(aes(y=..density..),binwidth = 0.2, position = "dodge") +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~gender) +
theme_bw()
grid.arrange(p1,p2,nrow=2)
#pet vs total
p1 <- ggplot(data = hm_data, aes(x=age))+
geom_density(aes(color="overall")) +
# Change the fill colour to differentiate it
geom_density(data=pet_df,aes(color="pet")) +
xlim(0,80) +
theme_bw()
# age distribution in percentage by gender
p2 <- ggplot(pet_df, aes(x = age, color = group, group=group, fill=group)) +
geom_density(binwidth = 0.2, position = "dodge") +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~gender) +
theme_bw()
grid.arrange(p1,p2,nrow=2)
p1 <- ggplot(data = hm_data, aes(x=age))+
geom_density(aes(color="overall")) +
# Change the fill colour to differentiate it
geom_density(data=pet_df,aes(color="pet")) +
xlim(0,80) +
theme_bw()
# age distribution in percentage by gender
p2 <- ggplot(pet_df, aes(x = age, color = group, group=group)) +
geom_density(binwidth = 0.2, position = "dodge") +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~gender) +
theme_bw()
grid.arrange(p1,p2,nrow=2)
# age distribution in percentage by gender
p2 <- ggplot(pet_df, aes(x = age, color = group, group=group)) +
geom_density(position = "dodge") +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~gender) +
theme_bw()
grid.arrange(p1,p2,nrow=2)
p1 <- ggplot(data = hm_data, aes(x=age))+
geom_density(aes(color="overall")) +
# Change the fill colour to differentiate it
geom_density(data=pet_df,aes(color="pet")) +
xlim(0,80) +
facet_wrap(~gender) +
theme_bw()
# age distribution in percentage by gender
p2 <- ggplot(pet_df, aes(x = age, color = group, group=group)) +
geom_density(position = "dodge") +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~gender) +
theme_bw()
grid.arrange(p1,p2,nrow=2)
table(hm_data$country)
datatable(hm_data)
money.df <- bag_of_words %>% filter(grepl('money|cash|pay|salary|payment|credit card', cleaned_hm)) %>%
distinct(id) %>% left_join(hm_data) %>% mutate(word = NULL)
View(money.df)
data(obama)
View(money.df)
pet.df <- bag_of_words %>% filter(grepl('cat|kitten|dog|puppy|doggy|kitty|pet', cleaned_hm)) %>%
distinct(id) %>% left_join(hm_data) %>% mutate(word = NULL)
View(pet.df)
pet.df <- bag_of_words %>% filter(grepl(' cat | kitten | dog | puppy | doggy | kitty | pet ', cleaned_hm)) %>%
distinct(id) %>% left_join(hm_data) %>% mutate(word = NULL)
View(pet.df)
View(hm_data)
friend.df <- bag_of_words %>% filter(grepl('friend', cleaned_hm)) %>%
distinct(id) %>% left_join(hm_data) %>% mutate(word = NULL)
View(friend.df)
lover.df <- hm_data %>% filter(grepl('husband|wife|girlfriend|boyfriend', cleaned_hm))
View(lover.df)
family.df <- hm_data %>% filter(grepl('father|mother| mom | dad | son | daughter| sister | brother', cleaned_hm))
data(ToothGrowth)
len.VC <- ToothGrowth$len[which(ToothGrowth$supp=="VC")]
len.OJ <- ToothGrowth$len[which(ToothGrowth$supp=="OJ")]
length <- list(VC=len.VC, OJ=len.OJ)
diffBootCI <- function(vec1, vec2, B, FUN, q=0.95) {
n1 <- length(vec1)
n2 <- length(vec2)
if (n1 != n2) stop("uneven vector length")
sample.1 <- matrix(sample(vec1,n1*B,replace = T),nrow = B, ncol=n1)
sample.2 <- matrix(sample(vec2,n2*B,replace = T),nrow = B, ncol=n2)
theta.1 <- apply(sample.1, 1, FUN)
theta.2 <- apply(sample.2, 1, FUN)
diff <- theta.1-theta.2
return(c(mean(diff)-qt(0.95,df=n1-1)*sd(diff)/sqrt(n1),
mean(diff)-qt(0.05,df=n1-1)*sd(diff)/sqrt(n1)))
#return(quantile(diff,c(1-q,q)))
}
diffBootCI(len.VC,len.OJ,1000,IQR)
diffBootCI <- function(vec1, vec2, B, FUN, q=0.95) {
n1 <- length(vec1)
n2 <- length(vec2)
if (n1 != n2) stop("vector length not even")
sample.1 <- matrix(sample(vec1,n1*B,replace = T),nrow = B, ncol=n1)
sample.2 <- matrix(sample(vec2,n2*B,replace = T),nrow = B, ncol=n2)
theta.1 <- apply(sample.1, 1, FUN)
theta.2 <- apply(sample.2, 1, FUN)
diff <- theta.1-theta.2
#return(c(mean(diff)-qt(0.95,df=n1-1)*sd(diff)/sqrt(n1),
#         mean(diff)-qt(0.05,df=n1-1)*sd(diff)/sqrt(n1)))
return(quantile(diff,c(1-q,q)))
}
diffBootCI(len.VC,len.OJ,1000,IQR)
View(hm_data)
ggplot(hm_data, aes(x=age,y=num_sentence))+goem_point()
qplot(hm_data, aes(x=age,y=num_sentence))
View(hm_data)
qplot(hm_data$age,hm_data$num_sentence)
gplot(hm_data, aes(x=age, y=num_sentence)) +
geom_point(size=2, shape=23)
ggplot(hm_data, aes(x=age, y=num_sentence)) +
geom_point(size=2, shape=23)
ggplot(hm_data, aes(x=age, y=num_sentence)) +
geom_point(size=1)
ggplot(hm_data, aes(x=age, y=num_sentence)) +
geom_point(size=0.2)
ggplot(hm_data, aes(x=age, y=num_sentence,color=gender)) +
geom_point(size=0.2)
ggplot(hm_data, aes(x=age, y=num_sentence,color=gender)) +
geom_point(size=0.5)
View(hm_data)
ggplot(hm_data%>%filter(num_sentence>5), aes(x=age, y=num_sentence,color=gender)) +
geom_point(size=0.5)
ggplot(data = hm_data, aes(x=age,color=gender))+
geom_density() +
theme_bw()
ggplot(hm_data, aes(x=age, y=num_sentence,color=gender)) +
geom_point(size=0.5)+
theme_bw()
hm_data %>% filter(num_sentence>50)
hm_data %>% filter(wid="455")
hm_data %>% filter(wid=="455")
hm_data %>% filter(wid=="455") %>% select(cleaned_hm)
